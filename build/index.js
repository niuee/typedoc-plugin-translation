import{ParameterType,Converter,Models,ReflectionKind}from"typedoc";import crypto from"crypto";import{existsSync,readFileSync,mkdirSync,writeFileSync}from"node:fs";import{resolve}from"node:path";const reflectionKind=ReflectionKind;function load(app){app.options.addDeclaration({name:"l10nCode",help:"The language code for the generating translation json file",type:ParameterType.String,defaultValue:"en"}),app.options.addDeclaration({name:"translationMode",help:"The translation mode for generating or injecting the translation jsons",type:ParameterType.String,defaultValue:"generate"}),app.converter.on(Converter.EVENT_END,(context=>{const l10nCode=app.options.getValue("l10nCode");switch(app.options.getValue("translationMode")){case"generate":app.logger.info(`Generating translation jsons for ${l10nCode}`);const res=generateTranslationJSON(l10nCode,context),projectReflection=context.project;for(const key in res){const path=res[key].projectPath;void 0===getByPath(projectReflection,path)&&app.logger.error(`Path not found: ${path}`)}break;case"inject":app.logger.info(`Injecting translation for ${l10nCode}`),function(l10nCode,context){const curStagingTranslationFile=resolve(`./translations/staging/${l10nCode}`,"translation.json"),projectReflection=context.project;if(dfs(projectReflection,[]),existsSync(curStagingTranslationFile)){const curStagingTranslation=JSON.parse(readFileSync(curStagingTranslationFile,"utf-8")),translationKeys=Object.keys(curStagingTranslation);for(const key of translationKeys){const curStagingItem=curStagingTranslation[key];if(""!==curStagingItem.translation){const item=getByPathShort(projectReflection,curStagingItem.projectPath),finalPath=curStagingItem.projectPath[curStagingItem.projectPath.length-1];if(void 0!==item){const originalText=getByPath(projectReflection,curStagingItem.projectPath);void 0!==originalText&&curStagingItem.originalText==originalText&&(item[finalPath]=curStagingItem.translation)}}}}}(l10nCode,context);break;default:app.logger.info(`Generating translation jsons for ${l10nCode}`),generateTranslationJSON(l10nCode,context)}}))}function generateTranslationJSON(l10nCode,context){const curStagingTranslationFile=resolve(`./translations/staging/${l10nCode}`,"translation.json"),curProdTranslationFile=resolve(`./translations/prod/${l10nCode}`,"translation.json"),res=dfs(context.project,[]),trimmedDownData={};if(existsSync(curProdTranslationFile)){const curProdTranslation=JSON.parse(readFileSync(curProdTranslationFile,"utf-8")),translationKeys=Object.keys(curProdTranslation);for(const key of translationKeys){const curProdItem=curProdTranslation[key];""!==curProdItem.translation&&curProdItem.translationKey in res&&res[curProdItem.translationKey].originalText==curProdItem.originalText&&(res[curProdItem.translationKey].translation=curProdItem.translation)}}if(existsSync(curStagingTranslationFile)){const curStagingTranslation=JSON.parse(readFileSync(curStagingTranslationFile,"utf-8")),translationKeys=Object.keys(curStagingTranslation);for(const key of translationKeys){const curStagingItem=curStagingTranslation[key];""!==curStagingItem.translation&&curStagingItem.translationKey in res&&res[curStagingItem.translationKey].originalText==curStagingItem.originalText&&(res[curStagingItem.translationKey].translation=curStagingItem.translation)}}for(const translationKey in res){const item=res[translationKey],trimmedItem={humanReadablePath:item.humanReadablePath,kind:item.kind,originalText:item.originalText,translation:item.translation,projectPath:item.projectPath,translationKey:item.translationKey};trimmedDownData[translationKey]=trimmedItem}return mkdirSync(`./translations/staging/${l10nCode}`,{recursive:!0}),writeFileSync(resolve(`./translations/staging/${l10nCode}`,"translation.json"),JSON.stringify(trimmedDownData,null,2)),res}function reflectionMapping(node){if(null==node.kind)return"unknown";switch(node.kind){case reflectionKind.Project:return"project";case reflectionKind.Module:return"module";case reflectionKind.Namespace:return"namespace";case reflectionKind.Enum:return"enum";case reflectionKind.EnumMember:return"enumMember";case reflectionKind.Variable:return"variable";case reflectionKind.Function:return"function";case reflectionKind.Class:return"class";case reflectionKind.Interface:return"interface";case reflectionKind.Constructor:return"constructor";case reflectionKind.Property:return"property";case reflectionKind.Method:return"method";case reflectionKind.CallSignature:return"callSignature";case reflectionKind.IndexSignature:return"indexSignature";case reflectionKind.ConstructorSignature:return"constructorSignature";case reflectionKind.Parameter:return"parameter";case reflectionKind.TypeLiteral:return"typeLiteral";case reflectionKind.TypeParameter:return"typeParameter";case reflectionKind.Accessor:return"accessor";case reflectionKind.GetSignature:return"getSignature";case reflectionKind.SetSignature:return"setSignature";case reflectionKind.TypeAlias:return"typeAlias";case reflectionKind.Reference:return"reference";default:return"unknown"}}function getCategoryStrings(node,path=[],humanReadablePath=[]){if(void 0!==node.categories)return node.categories.map(((category,index)=>{const flatPath=[`${node.id}`,"categories",`index-${index}`],projectPath=[...path,"categories",`index-${index}`,"title"],translationKey=crypto.createHash("md5").update(`${projectPath.join("")}${category.title}category`).digest("hex"),locationIdentifier=crypto.createHash("md5").update(`${flatPath.join("")}${category.title}category`).digest("hex"),nextLevelHumanReadablePath=[...humanReadablePath,"categories",`index-${index}`,"title"];return{translationKey:translationKey,flatPath:flatPath,projectPath:projectPath,originalText:category.title,translation:"",kind:"category",locationIdentifier:locationIdentifier,humanReadablePath:nextLevelHumanReadablePath.join(" > ")}}))}function dfs(node,path=[],humanReadablePath=[]){const res={};if(node.flags&&"isExternal"in node.flags&&node.flags.isExternal)return res;if("categories"in node&&void 0!==node.categories){const categories=getCategoryStrings(node,path,humanReadablePath);void 0!==categories&&categories.forEach((category=>{res[category.translationKey]=category}))}if(void 0!==node.comment){const translations=function(node,path,humanReadablePath=[]){const translationItems=[];void 0!==node.comment&&(node.comment.getTags("@translation").forEach((comment=>{comment.content.forEach(((content,index)=>{if("text"!==content.kind)return;const item={originalText:content.text,translation:"",flatPath:[],projectPath:[],locationIdentifier:"",translationKey:"",kind:""};item.originalText=content.text,item.translation="",item.flatPath=[],item.flatPath.push(`${node.id}`),item.flatPath.push(`${node.name}`),item.flatPath.push("comments"),item.flatPath.push(`index-${index}`);const insertAtSummary=node.comment.summary.length;item.projectPath=[...path,"comment","summary",`index-${insertAtSummary}`,"text"],node.comment.summary.push(Object.assign({},content)),item.kind=reflectionMapping(node);const locationIdentifier=crypto.createHash("md5").update(`${item.flatPath.join("")}${item.originalText}${item.kind}`).digest("hex");item.translationKey=crypto.createHash("md5").update(`${item.projectPath.join("")}${item.originalText}${item.kind}`).digest("hex"),item.locationIdentifier=locationIdentifier,item.humanReadablePath=[...humanReadablePath,"translation comments",`index-${index}`,"text"].join(" > "),translationItems.push(item)}))})),node.comment.removeTags("@translation"));return translationItems}(node,path,humanReadablePath),translationBlocks=function(node,path,humanReadablePath=[]){const translationItems=[];void 0!==node.comment&&node.comment.blockTags.forEach(((comment,blockIndex)=>{"@translationBlock"===comment.tag&&comment.content.forEach(((content,index)=>{if("text"!==content.kind)return;const item={originalText:content.text,translation:"",flatPath:[],projectPath:[],locationIdentifier:"",translationKey:"",kind:""};item.originalText=content.text,item.translation="",item.flatPath=[],item.flatPath.push(`${node.id}`),item.flatPath.push(`${node.name}`),item.flatPath.push("comments"),item.flatPath.push(`index-${index}`),item.projectPath=[...path,"comment","blockTags",`index-${blockIndex}`,"content",`index-${index}`,"text"],item.kind=reflectionMapping(node);const locationIdentifier=crypto.createHash("md5").update(`${item.flatPath.join("")}${item.originalText}${item.kind}`).digest("hex");item.translationKey=crypto.createHash("md5").update(`${item.projectPath.join("")}${item.originalText}${item.kind}`).digest("hex"),item.locationIdentifier=locationIdentifier,item.humanReadablePath=[...humanReadablePath,"translation block comments",`index-${index}`,"text"].join(" > "),translationItems.push(item)}))}));return translationItems}(node,path,humanReadablePath);translations.forEach((translation=>{res[translation.translationKey]=translation})),translationBlocks.forEach((translation=>{res[translation.translationKey]=translation}))}if("children"in node){node.children.forEach(((child,index)=>{const localRes=dfs(child,[...path,"children",`index-${index}`],[...humanReadablePath,child.name]),translationKeys=Object.keys(localRes);for(const key of translationKeys)res[key]=localRes[key]}))}if("signatures"in node){node.signatures.forEach(((signature,index)=>{const localRes=dfs(signature,[...path,"signatures",`index-${index}`],[...humanReadablePath,signature.name]),translationKeys=Object.keys(localRes);for(const key of translationKeys)res[key]=localRes[key]}))}if("getSignature"in node){parseAccessorComment(node.getSignature,path,node,humanReadablePath).forEach((translationItem=>{res[translationItem.translationKey]=translationItem}));const getSignature=node.getSignature,localRes=dfs(getSignature,[...path,"getSignature"],[...humanReadablePath,getSignature.name]),translationKeys=Object.keys(localRes);for(const key of translationKeys)res[key]=localRes[key]}if("setSignature"in node){parseAccessorComment(node.setSignature,path,node,humanReadablePath).forEach((translationItem=>{res[translationItem.translationKey]=translationItem}));const setSignature=node.setSignature,localRes=dfs(setSignature,[...path,"setSignature"],[...humanReadablePath,setSignature.name]),translationKeys=Object.keys(localRes);for(const key of translationKeys)res[key]=localRes[key]}return res}function parseAccessorComment(node,path,parentNode,humanReadablePath=[]){const translationItems=[];return void 0!==node.comment&&(null==parentNode.comment&&(parentNode.comment=new Models.Comment),node.comment.getTags("@accessorDescription").forEach((comment=>{comment.content.forEach(((content,index)=>{if("text"!==content.kind)return;const item={originalText:content.text,translation:"",flatPath:[],projectPath:[],locationIdentifier:"",translationKey:"",kind:""};item.originalText=content.text,item.translation="",item.flatPath=[],item.flatPath.push(`${node.id}`),item.flatPath.push(`${node.name}`),item.flatPath.push("comments"),item.flatPath.push(`index-${index}`);const insertAtSummary=parentNode.comment.summary.length;item.projectPath=[...path,"comment","summary",`index-${insertAtSummary}`,"text"],parentNode.comment.summary.push(Object.assign({},content)),item.kind=reflectionMapping(parentNode);const locationIdentifier=crypto.createHash("md5").update(`${item.flatPath.join("")}${item.originalText}${item.kind}`).digest("hex");item.translationKey=crypto.createHash("md5").update(`${item.projectPath.join("")}${item.originalText}${item.kind}`).digest("hex"),item.locationIdentifier=locationIdentifier,item.humanReadablePath=[...humanReadablePath,"accessor comments",`index-${index}`,"text"].join(" > "),translationItems.push(item)}))})),node.comment.removeTags("@accessorDescription")),translationItems}function getByPathShort(root,path){let obj=root;for(let index=0;index<path.length-1;index++){if(void 0===obj)return void console.error("Path not found",path);if(path[index].length>=5&&"index"===path[index].substring(0,5)){obj=obj[parseInt(path[index].substring(6))]}else if(path[index]in obj){obj=obj[path[index]]}}return obj}function getByPath(root,path){let obj=root;for(let index=0;index<path.length;index++){if(void 0===obj)return void console.error("Path not found",path);if(path[index].length>=5&&"index"===path[index].substring(0,5)){obj=obj[parseInt(path[index].substring(6))]}else obj=obj[path[index]]}return obj}export{getByPath,getByPathShort,getCategoryStrings,load,reflectionMapping};
//# sourceMappingURL=index.js.map
